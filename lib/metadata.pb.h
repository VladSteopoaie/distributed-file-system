// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_metadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_metadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_metadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_metadata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_metadata_2eproto;
class Stat;
struct StatDefaultTypeInternal;
extern StatDefaultTypeInternal _Stat_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Stat* Arena::CreateMaybeMessage<::Stat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Stat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Stat) */ {
 public:
  inline Stat() : Stat(nullptr) {}
  ~Stat() override;
  explicit constexpr Stat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stat(const Stat& from);
  Stat(Stat&& from) noexcept
    : Stat() {
    *this = ::std::move(from);
  }

  inline Stat& operator=(const Stat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stat& operator=(Stat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stat& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stat* internal_default_instance() {
    return reinterpret_cast<const Stat*>(
               &_Stat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Stat& a, Stat& b) {
    a.Swap(&b);
  }
  inline void Swap(Stat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Stat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Stat";
  }
  protected:
  explicit Stat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kModeFieldNumber = 3,
    kNlinkFieldNumber = 4,
    kUidFieldNumber = 5,
    kGidFieldNumber = 6,
    kRdevFieldNumber = 7,
    kSizeFieldNumber = 8,
    kBlksizeFieldNumber = 9,
    kBlocksFieldNumber = 10,
    kAtimeFieldNumber = 11,
    kMtimeFieldNumber = 12,
    kCtimeFieldNumber = 13,
  };
  // int64 dev = 1;
  void clear_dev();
  int64_t dev() const;
  void set_dev(int64_t value);
  private:
  int64_t _internal_dev() const;
  void _internal_set_dev(int64_t value);
  public:

  // int64 ino = 2;
  void clear_ino();
  int64_t ino() const;
  void set_ino(int64_t value);
  private:
  int64_t _internal_ino() const;
  void _internal_set_ino(int64_t value);
  public:

  // int32 mode = 3;
  void clear_mode();
  int32_t mode() const;
  void set_mode(int32_t value);
  private:
  int32_t _internal_mode() const;
  void _internal_set_mode(int32_t value);
  public:

  // int32 nlink = 4;
  void clear_nlink();
  int32_t nlink() const;
  void set_nlink(int32_t value);
  private:
  int32_t _internal_nlink() const;
  void _internal_set_nlink(int32_t value);
  public:

  // int32 uid = 5;
  void clear_uid();
  int32_t uid() const;
  void set_uid(int32_t value);
  private:
  int32_t _internal_uid() const;
  void _internal_set_uid(int32_t value);
  public:

  // int32 gid = 6;
  void clear_gid();
  int32_t gid() const;
  void set_gid(int32_t value);
  private:
  int32_t _internal_gid() const;
  void _internal_set_gid(int32_t value);
  public:

  // int64 rdev = 7;
  void clear_rdev();
  int64_t rdev() const;
  void set_rdev(int64_t value);
  private:
  int64_t _internal_rdev() const;
  void _internal_set_rdev(int64_t value);
  public:

  // int64 size = 8;
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // int64 blksize = 9;
  void clear_blksize();
  int64_t blksize() const;
  void set_blksize(int64_t value);
  private:
  int64_t _internal_blksize() const;
  void _internal_set_blksize(int64_t value);
  public:

  // int64 blocks = 10;
  void clear_blocks();
  int64_t blocks() const;
  void set_blocks(int64_t value);
  private:
  int64_t _internal_blocks() const;
  void _internal_set_blocks(int64_t value);
  public:

  // int64 atime = 11;
  void clear_atime();
  int64_t atime() const;
  void set_atime(int64_t value);
  private:
  int64_t _internal_atime() const;
  void _internal_set_atime(int64_t value);
  public:

  // int64 mtime = 12;
  void clear_mtime();
  int64_t mtime() const;
  void set_mtime(int64_t value);
  private:
  int64_t _internal_mtime() const;
  void _internal_set_mtime(int64_t value);
  public:

  // int64 ctime = 13;
  void clear_ctime();
  int64_t ctime() const;
  void set_ctime(int64_t value);
  private:
  int64_t _internal_ctime() const;
  void _internal_set_ctime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Stat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t dev_;
  int64_t ino_;
  int32_t mode_;
  int32_t nlink_;
  int32_t uid_;
  int32_t gid_;
  int64_t rdev_;
  int64_t size_;
  int64_t blksize_;
  int64_t blocks_;
  int64_t atime_;
  int64_t mtime_;
  int64_t ctime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_metadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Stat

// int64 dev = 1;
inline void Stat::clear_dev() {
  dev_ = int64_t{0};
}
inline int64_t Stat::_internal_dev() const {
  return dev_;
}
inline int64_t Stat::dev() const {
  // @@protoc_insertion_point(field_get:Stat.dev)
  return _internal_dev();
}
inline void Stat::_internal_set_dev(int64_t value) {
  
  dev_ = value;
}
inline void Stat::set_dev(int64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:Stat.dev)
}

// int64 ino = 2;
inline void Stat::clear_ino() {
  ino_ = int64_t{0};
}
inline int64_t Stat::_internal_ino() const {
  return ino_;
}
inline int64_t Stat::ino() const {
  // @@protoc_insertion_point(field_get:Stat.ino)
  return _internal_ino();
}
inline void Stat::_internal_set_ino(int64_t value) {
  
  ino_ = value;
}
inline void Stat::set_ino(int64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:Stat.ino)
}

// int32 mode = 3;
inline void Stat::clear_mode() {
  mode_ = 0;
}
inline int32_t Stat::_internal_mode() const {
  return mode_;
}
inline int32_t Stat::mode() const {
  // @@protoc_insertion_point(field_get:Stat.mode)
  return _internal_mode();
}
inline void Stat::_internal_set_mode(int32_t value) {
  
  mode_ = value;
}
inline void Stat::set_mode(int32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:Stat.mode)
}

// int32 nlink = 4;
inline void Stat::clear_nlink() {
  nlink_ = 0;
}
inline int32_t Stat::_internal_nlink() const {
  return nlink_;
}
inline int32_t Stat::nlink() const {
  // @@protoc_insertion_point(field_get:Stat.nlink)
  return _internal_nlink();
}
inline void Stat::_internal_set_nlink(int32_t value) {
  
  nlink_ = value;
}
inline void Stat::set_nlink(int32_t value) {
  _internal_set_nlink(value);
  // @@protoc_insertion_point(field_set:Stat.nlink)
}

// int32 uid = 5;
inline void Stat::clear_uid() {
  uid_ = 0;
}
inline int32_t Stat::_internal_uid() const {
  return uid_;
}
inline int32_t Stat::uid() const {
  // @@protoc_insertion_point(field_get:Stat.uid)
  return _internal_uid();
}
inline void Stat::_internal_set_uid(int32_t value) {
  
  uid_ = value;
}
inline void Stat::set_uid(int32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:Stat.uid)
}

// int32 gid = 6;
inline void Stat::clear_gid() {
  gid_ = 0;
}
inline int32_t Stat::_internal_gid() const {
  return gid_;
}
inline int32_t Stat::gid() const {
  // @@protoc_insertion_point(field_get:Stat.gid)
  return _internal_gid();
}
inline void Stat::_internal_set_gid(int32_t value) {
  
  gid_ = value;
}
inline void Stat::set_gid(int32_t value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:Stat.gid)
}

// int64 rdev = 7;
inline void Stat::clear_rdev() {
  rdev_ = int64_t{0};
}
inline int64_t Stat::_internal_rdev() const {
  return rdev_;
}
inline int64_t Stat::rdev() const {
  // @@protoc_insertion_point(field_get:Stat.rdev)
  return _internal_rdev();
}
inline void Stat::_internal_set_rdev(int64_t value) {
  
  rdev_ = value;
}
inline void Stat::set_rdev(int64_t value) {
  _internal_set_rdev(value);
  // @@protoc_insertion_point(field_set:Stat.rdev)
}

// int64 size = 8;
inline void Stat::clear_size() {
  size_ = int64_t{0};
}
inline int64_t Stat::_internal_size() const {
  return size_;
}
inline int64_t Stat::size() const {
  // @@protoc_insertion_point(field_get:Stat.size)
  return _internal_size();
}
inline void Stat::_internal_set_size(int64_t value) {
  
  size_ = value;
}
inline void Stat::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Stat.size)
}

// int64 blksize = 9;
inline void Stat::clear_blksize() {
  blksize_ = int64_t{0};
}
inline int64_t Stat::_internal_blksize() const {
  return blksize_;
}
inline int64_t Stat::blksize() const {
  // @@protoc_insertion_point(field_get:Stat.blksize)
  return _internal_blksize();
}
inline void Stat::_internal_set_blksize(int64_t value) {
  
  blksize_ = value;
}
inline void Stat::set_blksize(int64_t value) {
  _internal_set_blksize(value);
  // @@protoc_insertion_point(field_set:Stat.blksize)
}

// int64 blocks = 10;
inline void Stat::clear_blocks() {
  blocks_ = int64_t{0};
}
inline int64_t Stat::_internal_blocks() const {
  return blocks_;
}
inline int64_t Stat::blocks() const {
  // @@protoc_insertion_point(field_get:Stat.blocks)
  return _internal_blocks();
}
inline void Stat::_internal_set_blocks(int64_t value) {
  
  blocks_ = value;
}
inline void Stat::set_blocks(int64_t value) {
  _internal_set_blocks(value);
  // @@protoc_insertion_point(field_set:Stat.blocks)
}

// int64 atime = 11;
inline void Stat::clear_atime() {
  atime_ = int64_t{0};
}
inline int64_t Stat::_internal_atime() const {
  return atime_;
}
inline int64_t Stat::atime() const {
  // @@protoc_insertion_point(field_get:Stat.atime)
  return _internal_atime();
}
inline void Stat::_internal_set_atime(int64_t value) {
  
  atime_ = value;
}
inline void Stat::set_atime(int64_t value) {
  _internal_set_atime(value);
  // @@protoc_insertion_point(field_set:Stat.atime)
}

// int64 mtime = 12;
inline void Stat::clear_mtime() {
  mtime_ = int64_t{0};
}
inline int64_t Stat::_internal_mtime() const {
  return mtime_;
}
inline int64_t Stat::mtime() const {
  // @@protoc_insertion_point(field_get:Stat.mtime)
  return _internal_mtime();
}
inline void Stat::_internal_set_mtime(int64_t value) {
  
  mtime_ = value;
}
inline void Stat::set_mtime(int64_t value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:Stat.mtime)
}

// int64 ctime = 13;
inline void Stat::clear_ctime() {
  ctime_ = int64_t{0};
}
inline int64_t Stat::_internal_ctime() const {
  return ctime_;
}
inline int64_t Stat::ctime() const {
  // @@protoc_insertion_point(field_get:Stat.ctime)
  return _internal_ctime();
}
inline void Stat::_internal_set_ctime(int64_t value) {
  
  ctime_ = value;
}
inline void Stat::set_ctime(int64_t value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:Stat.ctime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_metadata_2eproto

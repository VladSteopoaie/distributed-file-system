// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metadata.proto

#include "metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr Stat::Stat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dev_(int64_t{0})
  , ino_(int64_t{0})
  , mode_(0)
  , nlink_(0)
  , uid_(0)
  , gid_(0)
  , rdev_(int64_t{0})
  , size_(int64_t{0})
  , blksize_(int64_t{0})
  , blocks_(int64_t{0})
  , atime_(int64_t{0})
  , mtime_(int64_t{0})
  , ctime_(int64_t{0}){}
struct StatDefaultTypeInternal {
  constexpr StatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatDefaultTypeInternal() {}
  union {
    Stat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatDefaultTypeInternal _Stat_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_metadata_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_metadata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_metadata_2eproto = nullptr;

const uint32_t TableStruct_metadata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Stat, dev_),
  PROTOBUF_FIELD_OFFSET(::Stat, ino_),
  PROTOBUF_FIELD_OFFSET(::Stat, mode_),
  PROTOBUF_FIELD_OFFSET(::Stat, nlink_),
  PROTOBUF_FIELD_OFFSET(::Stat, uid_),
  PROTOBUF_FIELD_OFFSET(::Stat, gid_),
  PROTOBUF_FIELD_OFFSET(::Stat, rdev_),
  PROTOBUF_FIELD_OFFSET(::Stat, size_),
  PROTOBUF_FIELD_OFFSET(::Stat, blksize_),
  PROTOBUF_FIELD_OFFSET(::Stat, blocks_),
  PROTOBUF_FIELD_OFFSET(::Stat, atime_),
  PROTOBUF_FIELD_OFFSET(::Stat, mtime_),
  PROTOBUF_FIELD_OFFSET(::Stat, ctime_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Stat)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Stat_default_instance_),
};

const char descriptor_table_protodef_metadata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016metadata.proto\"\301\001\n\004Stat\022\013\n\003dev\030\001 \001(\003\022\013"
  "\n\003ino\030\002 \001(\003\022\014\n\004mode\030\003 \001(\005\022\r\n\005nlink\030\004 \001(\005"
  "\022\013\n\003uid\030\005 \001(\005\022\013\n\003gid\030\006 \001(\005\022\014\n\004rdev\030\007 \001(\003"
  "\022\014\n\004size\030\010 \001(\003\022\017\n\007blksize\030\t \001(\003\022\016\n\006block"
  "s\030\n \001(\003\022\r\n\005atime\030\013 \001(\003\022\r\n\005mtime\030\014 \001(\003\022\r\n"
  "\005ctime\030\r \001(\003b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_metadata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_metadata_2eproto = {
  false, false, 220, descriptor_table_protodef_metadata_2eproto, "metadata.proto", 
  &descriptor_table_metadata_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_metadata_2eproto::offsets,
  file_level_metadata_metadata_2eproto, file_level_enum_descriptors_metadata_2eproto, file_level_service_descriptors_metadata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_metadata_2eproto_getter() {
  return &descriptor_table_metadata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_metadata_2eproto(&descriptor_table_metadata_2eproto);

// ===================================================================

class Stat::_Internal {
 public:
};

Stat::Stat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Stat)
}
Stat::Stat(const Stat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dev_, &from.dev_,
    static_cast<size_t>(reinterpret_cast<char*>(&ctime_) -
    reinterpret_cast<char*>(&dev_)) + sizeof(ctime_));
  // @@protoc_insertion_point(copy_constructor:Stat)
}

inline void Stat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dev_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ctime_) -
    reinterpret_cast<char*>(&dev_)) + sizeof(ctime_));
}

Stat::~Stat() {
  // @@protoc_insertion_point(destructor:Stat)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Stat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Stat::ArenaDtor(void* object) {
  Stat* _this = reinterpret_cast< Stat* >(object);
  (void)_this;
}
void Stat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Stat::Clear() {
// @@protoc_insertion_point(message_clear_start:Stat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ctime_) -
      reinterpret_cast<char*>(&dev_)) + sizeof(ctime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ino = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ino_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nlink = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          nlink_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 gid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 rdev = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          rdev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 blksize = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          blksize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 blocks = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 atime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          atime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 mtime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          mtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ctime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          ctime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Stat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 dev = 1;
  if (this->_internal_dev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_dev(), target);
  }

  // int64 ino = 2;
  if (this->_internal_ino() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_ino(), target);
  }

  // int32 mode = 3;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mode(), target);
  }

  // int32 nlink = 4;
  if (this->_internal_nlink() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_nlink(), target);
  }

  // int32 uid = 5;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_uid(), target);
  }

  // int32 gid = 6;
  if (this->_internal_gid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_gid(), target);
  }

  // int64 rdev = 7;
  if (this->_internal_rdev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_rdev(), target);
  }

  // int64 size = 8;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_size(), target);
  }

  // int64 blksize = 9;
  if (this->_internal_blksize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_blksize(), target);
  }

  // int64 blocks = 10;
  if (this->_internal_blocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_blocks(), target);
  }

  // int64 atime = 11;
  if (this->_internal_atime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_atime(), target);
  }

  // int64 mtime = 12;
  if (this->_internal_mtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_mtime(), target);
  }

  // int64 ctime = 13;
  if (this->_internal_ctime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_ctime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Stat)
  return target;
}

size_t Stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Stat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 dev = 1;
  if (this->_internal_dev() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_dev());
  }

  // int64 ino = 2;
  if (this->_internal_ino() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ino());
  }

  // int32 mode = 3;
  if (this->_internal_mode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mode());
  }

  // int32 nlink = 4;
  if (this->_internal_nlink() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nlink());
  }

  // int32 uid = 5;
  if (this->_internal_uid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_uid());
  }

  // int32 gid = 6;
  if (this->_internal_gid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_gid());
  }

  // int64 rdev = 7;
  if (this->_internal_rdev() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_rdev());
  }

  // int64 size = 8;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // int64 blksize = 9;
  if (this->_internal_blksize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_blksize());
  }

  // int64 blocks = 10;
  if (this->_internal_blocks() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_blocks());
  }

  // int64 atime = 11;
  if (this->_internal_atime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_atime());
  }

  // int64 mtime = 12;
  if (this->_internal_mtime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_mtime());
  }

  // int64 ctime = 13;
  if (this->_internal_ctime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ctime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Stat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stat::GetClassData() const { return &_class_data_; }

void Stat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Stat *>(to)->MergeFrom(
      static_cast<const Stat &>(from));
}


void Stat::MergeFrom(const Stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Stat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dev() != 0) {
    _internal_set_dev(from._internal_dev());
  }
  if (from._internal_ino() != 0) {
    _internal_set_ino(from._internal_ino());
  }
  if (from._internal_mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from._internal_nlink() != 0) {
    _internal_set_nlink(from._internal_nlink());
  }
  if (from._internal_uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from._internal_gid() != 0) {
    _internal_set_gid(from._internal_gid());
  }
  if (from._internal_rdev() != 0) {
    _internal_set_rdev(from._internal_rdev());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_blksize() != 0) {
    _internal_set_blksize(from._internal_blksize());
  }
  if (from._internal_blocks() != 0) {
    _internal_set_blocks(from._internal_blocks());
  }
  if (from._internal_atime() != 0) {
    _internal_set_atime(from._internal_atime());
  }
  if (from._internal_mtime() != 0) {
    _internal_set_mtime(from._internal_mtime());
  }
  if (from._internal_ctime() != 0) {
    _internal_set_ctime(from._internal_ctime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stat::CopyFrom(const Stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stat::IsInitialized() const {
  return true;
}

void Stat::InternalSwap(Stat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stat, ctime_)
      + sizeof(Stat::ctime_)
      - PROTOBUF_FIELD_OFFSET(Stat, dev_)>(
          reinterpret_cast<char*>(&dev_),
          reinterpret_cast<char*>(&other->dev_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_metadata_2eproto_getter, &descriptor_table_metadata_2eproto_once,
      file_level_metadata_metadata_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Stat* Arena::CreateMaybeMessage< ::Stat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Stat >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
